@page "/game"

@using System.Linq

<h3>Number Puzzle Game</h3>

<div class="puzzle-grid">
    @foreach (var tile in tiles)
    {
        <button class="tile" @onclick="() => MoveTile(tile)">
            @tile
        </button>
    }
</div>

@if (IsSolved)
{
    <div class="message">
        <h4>Congratulations! You solved the puzzle!</h4>
        <button @onclick="ResetGame">Play Again</button>
    </div>
}

@code {
    private List<int> tiles = new List<int>();
    private int emptyTileIndex = 0;
    private bool IsSolved => !tiles.Where((tile, index) => tile != index + 1).Any();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        StartGame();
    }

    private void StartGame()
    {
        tiles = Enumerable.Range(1, 15).ToList();
        tiles.Add(0); // 0 represents the empty space
        ShuffleTiles();
    }

    private void ShuffleTiles()
    {
        Random random = new Random();
        tiles = tiles.OrderBy(x => random.Next()).ToList();
        emptyTileIndex = tiles.IndexOf(0);
    }

    private void MoveTile(int tile)
    {
        var tileIndex = tiles.IndexOf(tile);
        if (IsValidMove(tileIndex))
        {
            // Swap tile with empty space
            tiles[emptyTileIndex] = tile;
            tiles[tileIndex] = 0;
            emptyTileIndex = tileIndex;
        }
    }

    private bool IsValidMove(int tileIndex)
    {
        // Check if the move is adjacent to the empty tile
        int row = tileIndex / 4;
        int col = tileIndex % 4;
        int emptyRow = emptyTileIndex / 4;
        int emptyCol = emptyTileIndex % 4;

        return (Math.Abs(row - emptyRow) == 1 && col == emptyCol) ||
               (Math.Abs(col - emptyCol) == 1 && row == emptyRow);
    }

    private void ResetGame()
    {
        StartGame();
    }
}